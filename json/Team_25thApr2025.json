{
  "provider": "autogen_agentchat.teams.RoundRobinGroupChat",
  "component_type": "team",
  "version": 1,
  "component_version": 1,
  "description": "A single AssistantAgent (with a calculator tool) in a RoundRobinGroupChat team. ",
  "label": "RoundRobin Team",
  "config": {
    "participants": [
      {
        "provider": "autogen_agentchat.agents.AssistantAgent",
        "component_type": "agent",
        "version": 1,
        "component_version": 1,
        "description": "An agent that helps to fetch jobs from the internet and stores it on Notion DB. ",
        "label": "JobScheduler Agent",
        "config": {
          "name": "job_scheduler_agent",
          "model_client": {
            "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
            "component_type": "model",
            "version": 1,
            "component_version": 1,
            "description": "Chat completion client for OpenAI hosted models.",
            "label": "OpenAIChatCompletionClient",
            "config": {
              "model": "gpt-4o-mini"
            }
          },
          "tools": [
            {
              "provider": "autogen_core.tools.FunctionTool",
              "component_type": "tool",
              "version": 1,
              "component_version": 1,
              "description": "This tool fetches active queries from your Job Search Queries DB of Notion",
              "label": "NotionQueryLoaderTool",
              "config": {
                "source_code": "from notion_client import Client\nimport os\n\nnotion = Client(auth=os.getenv(\"NOTION_API_TOKEN\"))\nQUERY_DB_ID = os.getenv(\"QUERY_DB_ID\")\n\ndef get_active_queries():\n    rows = notion.databases.query(\n        database_id=QUERY_DB_ID,\n        filter={\"property\": \"Active\", \"checkbox\": {\"equals\": True}}\n    )\n    queries = []\n    for row in rows[\"results\"]:\n        props = row[\"properties\"]\n        queries.append({\n            \"query\": props[\"Search Query\"][\"title\"][0][\"text\"][\"content\"],\n            \"source\": props[\"Source\"][\"select\"][\"name\"],\n            \"category\": props.get(\"Category\", {}).get(\"select\", {}).get(\"name\", \"\")\n        })\n    return queries",
                "name": "get_active_queries",
                "description": "A simple calculator that performs basic arithmetic operations",
                "global_imports": [],
                "has_cancellation_support": false
              }
            },
            {
              "provider": "autogen_core.tools.FunctionTool",
              "component_type": "tool",
              "version": 1,
              "component_version": 1,
              "description": "A tool that performs Google searches using the Google Custom Search API. Requires the requests library, [GOOGLE_API_KEY, GOOGLE_CSE_ID] to be set,  env variable to function.",
              "label": "Google Search Tool",
              "config": {
                "source_code": "async def google_search(\n    query: str,\n    num_results: int = 10,\n    include_snippets: bool = True,\n    include_content: bool = True,\n    content_max_length: Optional[int] = 10000,\n    language: str = \"en\",\n    country: Optional[str] = None,\n    safe_search: bool = True,\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Perform a Google search using the Custom Search API and optionally fetch webpage content.\n\n    Args:\n        query: Search query string\n        num_results: Number of results to return (max 10)\n        include_snippets: Include result snippets in output\n        include_content: Include full webpage content in markdown format\n        content_max_length: Maximum length of webpage content (if included)\n        language: Language code for search results (e.g., en, es, fr)\n        country: Optional country code for search results (e.g., us, uk)\n        safe_search: Enable safe search filtering\n\n    Returns:\n        List[Dict[str, str]]: List of search results, each containing:\n            - title: Result title\n            - link: Result URL\n            - snippet: Result description (if include_snippets=True)\n            - content: Webpage content in markdown (if include_content=True)\n    \"\"\"\n    api_key = os.getenv(\"GOOGLE_API_KEY\")\n    cse_id = os.getenv(\"GOOGLE_CSE_ID\")\n\n    if not api_key or not cse_id:\n        raise ValueError(\"Missing required environment variables. Please set GOOGLE_API_KEY and GOOGLE_CSE_ID.\")\n\n    num_results = min(max(1, num_results), 10)\n\n    async def fetch_page_content(url: str, max_length: Optional[int] = 50000) -> str:\n        \"\"\"Helper function to fetch and convert webpage content to markdown\"\"\"\n        headers = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\"}\n\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url, headers=headers, timeout=10)\n                response.raise_for_status()\n\n                soup = BeautifulSoup(response.text, \"html.parser\")\n\n                # Remove script and style elements\n                for script in soup([\"script\", \"style\"]):\n                    script.decompose()\n\n                # Convert relative URLs to absolute\n                for tag in soup.find_all([\"a\", \"img\"]):\n                    if tag.get(\"href\"):\n                        tag[\"href\"] = urljoin(url, tag[\"href\"])\n                    if tag.get(\"src\"):\n                        tag[\"src\"] = urljoin(url, tag[\"src\"])\n\n                h2t = html2text.HTML2Text()\n                h2t.body_width = 0\n                h2t.ignore_images = False\n                h2t.ignore_emphasis = False\n                h2t.ignore_links = False\n                h2t.ignore_tables = False\n\n                markdown = h2t.handle(str(soup))\n\n                if max_length and len(markdown) > max_length:\n                    markdown = markdown[:max_length] + \"\\n...(truncated)\"\n\n                return markdown.strip()\n\n        except Exception as e:\n            return f\"Error fetching content: {str(e)}\"\n\n    params = {\n        \"key\": api_key,\n        \"cx\": cse_id,\n        \"q\": query,\n        \"num\": num_results,\n        \"hl\": language,\n        \"safe\": \"active\" if safe_search else \"off\",\n    }\n\n    if country:\n        params[\"gl\"] = country\n\n    try:\n        async with httpx.AsyncClient() as client:\n            response = await client.get(\"https://www.googleapis.com/customsearch/v1\", params=params, timeout=10)\n            response.raise_for_status()\n            data = response.json()\n\n            results = []\n            if \"items\" in data:\n                for item in data[\"items\"]:\n                    result = {\"title\": item.get(\"title\", \"\"), \"link\": item.get(\"link\", \"\")}\n                    if include_snippets:\n                        result[\"snippet\"] = item.get(\"snippet\", \"\")\n\n                    if include_content:\n                        result[\"content\"] = await fetch_page_content(result[\"link\"], max_length=content_max_length)\n\n                    results.append(result)\n\n            return results\n\n    except httpx.RequestError as e:\n        raise ValueError(f\"Failed to perform search: {str(e)}\") from e\n    except KeyError as e:\n        raise ValueError(f\"Invalid API response format: {str(e)}\") from e\n    except Exception as e:\n        raise ValueError(f\"Error during search: {str(e)}\") from e\n",
                "name": "google_search",
                "description": "\n    Perform Google searches using the Custom Search API with optional webpage content fetching.\n    Requires GOOGLE_API_KEY and GOOGLE_CSE_ID environment variables to be set.\n    ",
                "global_imports": [
                  {
                    "module": "typing",
                    "imports": [
                      "List",
                      "Dict",
                      "Optional"
                    ]
                  },
                  "os",
                  "httpx",
                  "html2text",
                  {
                    "module": "bs4",
                    "imports": [
                      "BeautifulSoup"
                    ]
                  },
                  {
                    "module": "urllib.parse",
                    "imports": [
                      "urljoin"
                    ]
                  }
                ],
                "has_cancellation_support": false
              }
            },
            {
              "provider": "autogen_core.tools.FunctionTool",
              "component_type": "tool",
              "version": 1,
              "component_version": 1,
              "description": "Tool Name: NotionMemoryTool  \nDescription: A tool to store and deduplicate job listings using Notion API technically quoting \"Inserts job into Notion DB if unique; used for de-duplication based on UID.\"\nType: FunctionTool  \nProgramming Language: Python",
              "label": "NotionMemoryTool",
              "config": {
                "source_code": "import os\nimport hashlib\nfrom typing import Dict\nfrom notion_client import Client\n\n# ENV: Please make sure these are set\nNOTION_API_TOKEN = os.getenv(\"NOTION_API_TOKEN\")\nNOTION_DB_ID = os.getenv(\"NOTION_JOBS_DB_ID\")\n\n# Initialize Notion client\nnotion = Client(auth=NOTION_API_TOKEN)\n\n\ndef store_job(job: Dict) -> bool:\n    \"\"\"\n    Stores a job in Notion if not a duplicate.\n    Returns True if inserted, False if skipped.\n    \"\"\"\n   \n    try:\n        notion.pages.create(\n            parent={\"database_id\": NOTION_DB_ID},\n            properties={\n                \"Job Title\": {\"title\": [{\"text\": {\"content\": job[\"title\"]}}]},\n                \"Company\": {\"rich_text\": [{\"text\": {\"content\": job[\"company\"]}}]},\n                \"Location\": {\"rich_text\": [{\"text\": {\"content\": job.get(\"location\", \"\")}}]},\n                \"Apply Link\": {\"url\": job[\"apply_link\"]},\n                \"Posted Date\": {\"date\": {\"start\": job.get(\"posted_date\")}},\n                \"Tags\": {\"multi_select\": [{\"name\": tag} for tag in job.get(\"tags\", [])]},\n                \"Source\": {\"rich_text\": [{\"text\": {\"content\": job.get(\"source\", \"\")}}]},\n                \"Description\": {\"rich_text\": [{\"text\": {\"content\": job.get(\"description\", \"\")}}]}\n            }\n        )\n        return True\n    except Exception as e:\n        raise RuntimeError(f\"Failed to insert job to Notion: {e}\")",
                "name": "store_job",
                "description": "A simple calculator that performs basic arithmetic operations",
                "global_imports": [],
                "has_cancellation_support": false
              }
            }
          ],
          "model_context": {
            "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
            "component_type": "chat_completion_context",
            "version": 1,
            "component_version": 1,
            "description": "An unbounded chat completion context that keeps a view of the all the messages.",
            "label": "UnboundedChatCompletionContext",
            "config": {}
          },
          "description": "An agent that provides assistance with ability to use tools.",
          "system_message": "You are a helpful and reliable Job Search Agent.\n\n1. Load a list of active job search queries from the Notion database \"Job Search Queries\".\n2. For each query which is Active:\n   - Use GoogleSearchTool to run the query\n   - Parse and extract jobs (Title, Description, Company, Location, Posted Date, Tags, Apply Link, Source)\n3. For each job listing:\n   - if an error errors, skip it and treat it as new.\n   - If it’s new, call the NotionMemoryTool with function `store_job(job)` to save the job in the \"Job Listings\" Notion database.\n   - If you get an error on Date field put in today's date.\n   - If you get an error on other field please replace it with a space.\n\n4. At the end of the run:\n   - Return a formatted JSON array of all **newly added** jobs.\n   - Each result must include:\n     - `title`\n     - `company`\n     - `location`\n     - `remote`\n     - `posted_date`\n     - `apply_link`\n     - `description`\n     - `source`\n     - `tags` (array)\n     - `uid`\n\nIf no new jobs were added, return: `[]`\n\nBe methodical. Skip or log any errors. Your job is to build a clean, deduplicated, structured list based on the queries stored in Notion.\n\nSolve tasks carefully. When done, say TERMINATE.",
          "model_client_stream": true,
          "reflect_on_tool_use": true,
          "tool_call_summary_format": "{result}"
        }
      }
    ],
    "termination_condition": {
      "provider": "autogen_agentchat.base.OrTerminationCondition",
      "component_type": "termination",
      "version": 1,
      "component_version": 1,
      "label": "OrTerminationCondition",
      "config": {
        "conditions": [
          {
            "provider": "autogen_agentchat.conditions.TextMentionTermination",
            "component_type": "termination",
            "version": 1,
            "component_version": 1,
            "description": "Terminate the conversation if a specific text is mentioned.",
            "label": "TextMentionTermination",
            "config": {
              "text": "TERMINATE"
            }
          },
          {
            "provider": "autogen_agentchat.conditions.MaxMessageTermination",
            "component_type": "termination",
            "version": 1,
            "component_version": 1,
            "description": "Terminate the conversation after a maximum number of messages have been exchanged.",
            "label": "MaxMessageTermination",
            "config": {
              "max_messages": 10,
              "include_agent_event": false
            }
          }
        ]
      }
    }
  }
}